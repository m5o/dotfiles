# History ----------------------------------------------------------
export HISTCONTROL="ignoredups"
#export HISTCONTROL="erasedups"
export HISTFILESIZE=5000
export HISTIGNORE="ls:cd:[bf]g:exit:..:...:ll:lla"
shopt -s histappend
hf(){ 
  grep "$@" ~/.bash_history
}



# Misc -------------------------------------------------------------
shopt -s checkwinsize # After each command, checks the windows size and changes lines and columns

# bash completion settings (actually, these are readline settings)
bind "set completion-ignore-case on" # note: bind used instead of sticking these in .inputrc
bind "set bell-style none" # no bell
bind "set show-all-if-ambiguous On" # show list automatically, without double tab

# Use vi command mode
# bind "set editing-mode vi"
# set -o vi  # this cmd had some trouble in os x
# bind -m vi-command -r 'v'



# Prompts ----------------------------------------------------------
#git_dirty_flag() {
  #git status 2> /dev/null | grep -c : | awk '{if ($1 > 0) print "⚡"}'
#}

function xtitle {  # change the title of your xterm* window
  unset PROMPT_COMMAND
  echo -ne "\033]0;$1\007"
}

function xtitle_and_prompt {
  echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"  # set title
  prompt_func  # set PS1
}

prompt_func() {
    previous_return_value=$?;
    prompt="${COLOR_GREEN}\w${COLOR_GRAY}$(__git_ps1)${COLOR_NC} "
    # prompt="${COLOR_GREEN}\w${COLOR_GRAY}$(__git_ps1)${COLOR_NC}\[\033]0;\u@\h: \w\007\] "
    # prompt="${COLOR_GREEN}\w${COLOR_NC}$(__git_ps1)${COLOR_YELLOW}$(git_dirty_flag)${COLOR_NC} "

    if test $previous_return_value -eq 0
    then
        PS1="${prompt}➔ "
    else
        PS1="${prompt}${COLOR_RED}➔ ${COLOR_NC}"
    fi
}
PROMPT_COMMAND=xtitle_and_prompt  #set prompt and title


# export PS1="${COLOR_GREEN}\w${COLOR_NC} > "  # Primary prompt with only a path
# export PS1="${COLOR_RED}\w > ${COLOR_NC}"  # Primary prompt with only a path, for root, need condition to use this for root
# export PS1="${COLOR_GRAY}\u@\h ${COLOR_GREEN}\w > ${COLOR_NC}"  # Primary prompt with user, host, and path 
# This runs before the prompt and sets the title of the xterm* window.  If you set the title in the prompt
# weird wrapping errors occur on some systems, so this method is superior
# export PROMPT_COMMAND='echo -ne "\033]0;${PWD##*/} ${USER}@${HOSTNAME%%.*}"; echo -ne "\007"'  # user@host path
# PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007\033[1;31m${PWD/#$HOME/~}\033[1;34m"'
# PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"'  # set xterm Window name YEAH!


export PS2='> '    # Secondary prompt
export PS3='#? '   # Prompt 3
export PS4='+'     # Prompt 4



# Navigation -------------------------------------------------------
# I got the following from, and mod'd it: http://www.macosxhints.com/article.php?story=20020716005123797
#    The following aliases (save & show) are for saving frequently used directories
#    You can save a directory using an abbreviation of your choosing. Eg. save ms
#    You can subsequently move to one of the saved directories by using cd with
#    the abbreviation you chose. Eg. cd ms  (Note that no '$' is necessary.)
if [ ! -f ~/.dirs ]; then  # if doesn't exist, create it
  touch ~/.dirs
fi

alias show='cat ~/.dirs'
save (){
  command sed "/!$/d" ~/.dirs > ~/.dirs1; \mv ~/.dirs1 ~/.dirs; echo "$@"=\"`pwd`\" >> ~/.dirs; source ~/.dirs ; 
}  #"
source ~/.dirs  # Initialization for the above 'save' facility: source the .sdirs file 
shopt -s cdable_vars # set the bash option so that no '$' is required when using the above facility



